#pragma once
#include "GRB.h"
#include "LT.h"
#define GRB_ERROR_SERIES 600
#define NS(n) GRB::Rule::Chain::N(n)
#define TS(n) GRB::Rule::Chain::T(n)
#define ISNS(n) GRB::Rule::Chain::isN(n)

#define RULE_START 'S'
#define RULE_PARAMETRESVIEW 'F'
#define RULE_PARAMETRES 'P'
#define RULE_FUNCTIONBODY  'B'
#define RULE_ARIFMETIC 'M'
#define RULE_INSTRUCTIONS 'N'
#define RULE_CONDITION 'R'
#define RULE_CALL 'K'
#define RULE_EXPRESSION 'E'
#define RULE_CALLPARAMETRES 'W'
#define RULE_CYCLECONDITIONBODY 'X'

namespace GRB {
	Greibach greibach(
		NS(RULE_START), TS('$'),
		11,
		Rule(
			NS(RULE_START), GRB_ERROR_SERIES + 0,
			3,
			Rule::Chain(6, TS(LEX_TYPE), TS(LEX_MINOR), TS(LEX_ID), NS(RULE_PARAMETRESVIEW), NS(RULE_FUNCTIONBODY), NS(RULE_START)),
			Rule::Chain(7, TS(LEX_VOID), TS(LEX_ID), NS(RULE_PARAMETRESVIEW), TS(LEX_LEFTBRACE), NS(RULE_INSTRUCTIONS), TS(LEX_RIGHTBRACE), NS(RULE_START)),
			Rule::Chain(4, TS(LEX_MAJOR), TS(LEX_LEFTBRACE), NS(RULE_INSTRUCTIONS), TS(LEX_RIGHTBRACE))
		),
		Rule(
			NS(RULE_PARAMETRESVIEW), GRB_ERROR_SERIES + 1,
			2,
			Rule::Chain(3, TS(LEX_LEFTTHESIS), NS(RULE_PARAMETRES), TS(LEX_RIGHTTHESIS)),
			Rule::Chain(2, TS(LEX_LEFTTHESIS), TS(LEX_RIGHTTHESIS))
		),
		Rule(
			NS(RULE_PARAMETRES), GRB_ERROR_SERIES + 2,
			2,
			Rule::Chain(2, TS(LEX_TYPE), TS(LEX_ID)),
			Rule::Chain(4, TS(LEX_TYPE), TS(LEX_ID), TS(LEX_COMMA), NS(RULE_PARAMETRES))
		),
		Rule(
			NS(RULE_FUNCTIONBODY), GRB_ERROR_SERIES + 3,
			4,
			Rule::Chain(6, TS(LEX_LEFTBRACE), NS(RULE_INSTRUCTIONS), TS(LEX_GIVE), TS(LEX_ID), TS(LEX_SEMICOLON), TS(LEX_RIGHTBRACE)),
			Rule::Chain(6, TS(LEX_LEFTBRACE), NS(RULE_INSTRUCTIONS), TS(LEX_GIVE), TS(LEX_LITERAL), TS(LEX_SEMICOLON), TS(LEX_RIGHTBRACE)),
			Rule::Chain(5, TS(LEX_LEFTBRACE), TS(LEX_GIVE), TS(LEX_ID), TS(LEX_SEMICOLON), TS(LEX_RIGHTBRACE)),
			Rule::Chain(5, TS(LEX_LEFTBRACE), TS(LEX_GIVE), TS(LEX_LITERAL), TS(LEX_SEMICOLON), TS(LEX_RIGHTBRACE))
		),
		Rule(
			NS(RULE_INSTRUCTIONS), GRB_ERROR_SERIES + 4,
			22,
			Rule::Chain(5, TS(LEX_DEFINE), TS(LEX_TYPE), TS(LEX_ID), TS(LEX_SEMICOLON), NS(RULE_INSTRUCTIONS)),
			Rule::Chain(7, TS(LEX_DEFINE), TS(LEX_TYPE), TS(LEX_ID), TS(LEX_EQUAL), NS(RULE_EXPRESSION), TS(LEX_SEMICOLON), NS(RULE_INSTRUCTIONS)),
			Rule::Chain(5, TS(LEX_ID), TS(LEX_EQUAL), NS(RULE_EXPRESSION), TS(LEX_SEMICOLON), NS(RULE_INSTRUCTIONS)),
			Rule::Chain(8, TS('u'), TS(LEX_LEFTTHESIS), NS(RULE_CONDITION), TS(LEX_RIGHTTHESIS), TS(LEX_LEFTBRACE), NS(RULE_CYCLECONDITIONBODY), TS(LEX_RIGHTBRACE), NS(RULE_INSTRUCTIONS)),
			Rule::Chain(8, TS('w'), TS(LEX_LEFTTHESIS), NS(RULE_CONDITION), TS(LEX_RIGHTTHESIS), TS(LEX_LEFTBRACE), NS(RULE_CYCLECONDITIONBODY), TS(LEX_RIGHTBRACE), NS(RULE_INSTRUCTIONS)),
			Rule::Chain(12, TS('w'), TS(LEX_LEFTTHESIS), NS(RULE_CONDITION), TS(LEX_RIGHTTHESIS), TS(LEX_LEFTBRACE), NS(RULE_CYCLECONDITIONBODY), TS(LEX_RIGHTBRACE), TS(LEX_ELSE), TS(LEX_LEFTBRACE), NS(RULE_CYCLECONDITIONBODY), TS(LEX_RIGHTBRACE), NS(RULE_INSTRUCTIONS)),

			Rule::Chain(4, TS(LEX_SHOW), TS(LEX_ID), TS(LEX_SEMICOLON), NS(RULE_INSTRUCTIONS)),
			Rule::Chain(4, TS(LEX_SHOW), TS(LEX_LITERAL), TS(LEX_SEMICOLON), NS(RULE_INSTRUCTIONS)),
			Rule::Chain(4, TS(LEX_SHOWBR), TS(LEX_ID), TS(LEX_SEMICOLON), NS(RULE_INSTRUCTIONS)),
			Rule::Chain(4, TS(LEX_SHOWBR), TS(LEX_LITERAL), TS(LEX_SEMICOLON), NS(RULE_INSTRUCTIONS)),

			Rule::Chain(4, TS(LEX_ID), NS(RULE_CALL), TS(LEX_SEMICOLON), NS(RULE_INSTRUCTIONS)),

			Rule::Chain(4, TS(LEX_DEFINE), TS(LEX_TYPE), TS(LEX_ID), TS(LEX_SEMICOLON)),
			Rule::Chain(6, TS(LEX_DEFINE), TS(LEX_TYPE), TS(LEX_ID), TS(LEX_EQUAL), NS(RULE_EXPRESSION), TS(LEX_SEMICOLON)),
			Rule::Chain(4, TS(LEX_ID), TS(LEX_EQUAL), NS(RULE_EXPRESSION), TS(LEX_SEMICOLON)),
			Rule::Chain(7, TS('u'), TS(LEX_LEFTTHESIS), NS(RULE_CONDITION), TS(LEX_RIGHTTHESIS), TS(LEX_LEFTBRACE), NS(RULE_CYCLECONDITIONBODY), TS(LEX_RIGHTBRACE)),
			Rule::Chain(7, TS('w'), TS(LEX_LEFTTHESIS), NS(RULE_CONDITION), TS(LEX_RIGHTTHESIS), TS(LEX_LEFTBRACE), NS(RULE_CYCLECONDITIONBODY), TS(LEX_RIGHTBRACE)),
			Rule::Chain(11, TS('w'), TS(LEX_LEFTTHESIS), NS(RULE_CONDITION), TS(LEX_RIGHTTHESIS), TS(LEX_LEFTBRACE), NS(RULE_CYCLECONDITIONBODY), TS(LEX_RIGHTBRACE), TS(LEX_ELSE), TS(LEX_LEFTBRACE), NS(RULE_CYCLECONDITIONBODY), TS(LEX_RIGHTBRACE)),

			Rule::Chain(3, TS(LEX_SHOW), TS(LEX_ID), TS(LEX_SEMICOLON)),
			Rule::Chain(3, TS(LEX_SHOW), TS(LEX_LITERAL), TS(LEX_SEMICOLON)),
			Rule::Chain(3, TS(LEX_SHOWBR), TS(LEX_ID), TS(LEX_SEMICOLON)),
			Rule::Chain(3, TS(LEX_SHOWBR), TS(LEX_LITERAL), TS(LEX_SEMICOLON)),

			Rule::Chain(3, TS(LEX_ID), NS(RULE_CALL), TS(LEX_SEMICOLON))
		),
		Rule(
			NS(RULE_CONDITION), GRB_ERROR_SERIES + 5,
			4,
			Rule::Chain(1, TS(LEX_ID)),
			Rule::Chain(3, TS(LEX_ID), TS(LEX_OPERATOR), TS(LEX_ID)),
			Rule::Chain(3, TS(LEX_ID), TS(LEX_OPERATOR), TS(LEX_LITERAL)),
			Rule::Chain(3, TS(LEX_LITERAL), TS(LEX_OPERATOR), TS(LEX_ID))
		),
		Rule(
			NS(RULE_CALL), GRB_ERROR_SERIES + 6,
			2,
			Rule::Chain(3, TS(LEX_LEFTTHESIS), NS(RULE_CALLPARAMETRES), TS(LEX_RIGHTTHESIS)),
			Rule::Chain(2, TS(LEX_LEFTTHESIS), TS(LEX_RIGHTTHESIS)) // ()
		),
		Rule(
			NS(RULE_EXPRESSION), GRB_ERROR_SERIES + 7,
			8,
			Rule::Chain(1, TS(LEX_ID)),
			Rule::Chain(1, TS(LEX_LITERAL)),
			Rule::Chain(3, TS(LEX_LEFTTHESIS), NS(RULE_EXPRESSION), TS(LEX_RIGHTTHESIS)),
			Rule::Chain(2, TS(LEX_ID), NS(RULE_CALL)),

			Rule::Chain(2, TS(LEX_ID), NS(RULE_ARIFMETIC)),
			Rule::Chain(2, TS(LEX_LITERAL), NS(RULE_ARIFMETIC)),
			Rule::Chain(4, TS(LEX_LEFTTHESIS), NS(RULE_EXPRESSION), TS(LEX_RIGHTTHESIS), NS(RULE_ARIFMETIC)),
			Rule::Chain(3, TS(LEX_ID), NS(RULE_CALL), NS(RULE_ARIFMETIC))
		),
		Rule(
			NS(RULE_CALLPARAMETRES), GRB_ERROR_SERIES + 8,
			4,
			Rule::Chain(1, TS(LEX_ID)),
			Rule::Chain(1, TS(LEX_LITERAL)),
			Rule::Chain(3, TS(LEX_ID), TS(LEX_COMMA), NS(RULE_CALLPARAMETRES)),
			Rule::Chain(3, TS(LEX_LITERAL), TS(LEX_COMMA), NS(RULE_CALLPARAMETRES))
		),
		Rule(
			NS(RULE_ARIFMETIC), GRB_ERROR_SERIES + 9,
			2,
			Rule::Chain(2, TS(LEX_OPERATOR), NS(RULE_EXPRESSION)),
			Rule::Chain(3, TS(LEX_OPERATOR), NS(RULE_EXPRESSION), NS(RULE_ARIFMETIC))
		),
		Rule(
			NS(RULE_CYCLECONDITIONBODY), GRB_ERROR_SERIES + 10,
			16,
			Rule::Chain(5, TS(LEX_DEFINE), TS(LEX_TYPE), TS(LEX_ID), TS(LEX_SEMICOLON), NS(RULE_CYCLECONDITIONBODY)),
			Rule::Chain(7, TS(LEX_DEFINE), TS(LEX_TYPE), TS(LEX_ID), TS(LEX_EQUAL), NS(RULE_EXPRESSION), TS(LEX_SEMICOLON), NS(RULE_CYCLECONDITIONBODY)),
			Rule::Chain(5, TS(LEX_ID), TS(LEX_EQUAL), NS(RULE_EXPRESSION), TS(LEX_SEMICOLON), NS(RULE_CYCLECONDITIONBODY)),

			Rule::Chain(4, TS(LEX_SHOW), TS(LEX_ID), TS(LEX_SEMICOLON), NS(RULE_CYCLECONDITIONBODY)),
			Rule::Chain(4, TS(LEX_SHOW), TS(LEX_LITERAL), TS(LEX_SEMICOLON), NS(RULE_CYCLECONDITIONBODY)),

			Rule::Chain(4, TS(LEX_SHOWBR), TS(LEX_LITERAL), TS(LEX_SEMICOLON), NS(RULE_CYCLECONDITIONBODY)),
			Rule::Chain(4, TS(LEX_SHOWBR), TS(LEX_ID), TS(LEX_SEMICOLON), NS(RULE_CYCLECONDITIONBODY)),

			Rule::Chain(4, TS(LEX_ID), NS(RULE_CALL), TS(LEX_SEMICOLON), NS(RULE_CYCLECONDITIONBODY)),

			Rule::Chain(4, TS(LEX_DEFINE), TS(LEX_TYPE), TS(LEX_ID), TS(LEX_SEMICOLON)),
			Rule::Chain(6, TS(LEX_DEFINE), TS(LEX_TYPE), TS(LEX_ID), TS(LEX_EQUAL), NS(RULE_EXPRESSION), TS(LEX_SEMICOLON)),
			Rule::Chain(4, TS(LEX_ID), TS(LEX_EQUAL), NS(RULE_EXPRESSION), TS(LEX_SEMICOLON)),

			Rule::Chain(3, TS(LEX_SHOW), TS(LEX_ID), TS(LEX_SEMICOLON)),
			Rule::Chain(3, TS(LEX_SHOW), TS(LEX_LITERAL), TS(LEX_SEMICOLON)),

			Rule::Chain(3, TS(LEX_SHOWBR), TS(LEX_ID), TS(LEX_SEMICOLON)),
			Rule::Chain(3, TS(LEX_SHOWBR), TS(LEX_LITERAL), TS(LEX_SEMICOLON)),

			Rule::Chain(3, TS(LEX_ID), NS(RULE_CALL), TS(LEX_SEMICOLON))
		)
	);
}